<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.Visa</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.Visa.Internal.Disposable">
            <summary>
            A base class that correctly implements the disposable pattern using recommended best practices.
            Where possible, any object that implements <see cref="T:System.IDisposable"/> should inherit from this.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.Finalize">
            <summary>
            Object finalizer, last chance to dispose unmanaged resources.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.Dispose">
            <summary>
            Implementation of <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.CheckDisposedAndThrow">
            <summary>
            Convenience function that throws an <see cref="T:System.ObjectDisposedException"/> if the object is disposed.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.DisposeManagedResources">
            <summary>
            Override this to dispose managed resources your class owns.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.DisposeUnmanagedResources">
            <summary>
            Override this to dispose unmanaged (i.e. not subject to garbage collection) resources your class owns.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Internal.Disposable.IsDisposed">
            <summary>
            True if the object has already been disposed.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.Internal.DisposableHelpers">
            <summary>
            Helpful extension methods for <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.DisposableHelpers.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Calls dispose on the given <see cref="T:System.IDisposable"/> if it is not null.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> to be disposed.</param>
        </member>
        <member name="T:NationalInstruments.Visa.Internal.VisaDllEventHandler">
            <summary>
            This delegate specifies the format for event handler callbacks in the VISA library.
            </summary>
            <param name="vi"></param>
            <param name="eventType"></param>
            <param name="context"></param>
            <param name="userHandle"></param>
            <returns></returns>
        </member>
        <member name="T:NationalInstruments.Visa.Internal.VisaObjectWrapper">
            <summary>
            Provides easy access to every overload of the viGet/SetAttribute functions so that we don't have to worry
            about extraneous parameters and error checking when implementing properties or other functionality that
            requires these methods.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.GpibInterface">
            <summary>
            Provides access to the board-level GPIB functionality that is available in VISA.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.Session">
            <summary>
            Serves as the base class for all VISA session objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.Int32,System.String)">
            <summary>
            Locks the resource for this session with a shared lock, with the specified
            timeput period.
            </summary>
            <param name="timeoutMilliseconds">The timeout period for obtaining the lock.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>
            Then name of the key that was granted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.TimeSpan,System.String)">
            <summary>
            Locks the resource for this session with a shared lock, with the specified
            timeput period.
            </summary>
            <param name="timeout">The timeout period for obtaining the lock.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>
            Then name of the key that was granted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.Int32)">
            <summary>
            Locks the resource for this session with an exclusive lock, with the specified
            timeput period.
            </summary>
            <param name="timeoutMilliseconds">The timeout period for obtaining the lock.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.TimeSpan)">
            <summary>
            Locks the resource for this session with an exclusive lock, with the specified
            timeput period.
            </summary>
            <param name="timeout">The timeout period for obtaining the lock.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource">
            <summary>
            Locks the resource for this session with an exclusive lock, with an infinite timeout.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.DisableEvent(Ivi.Visa.EventType)">
            <summary>
            Disables a client from receiving events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) to disable.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.DiscardEvents(Ivi.Visa.EventType)">
            <summary>
            Discard all pending events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) for which events are discarded.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.EnableEvent(Ivi.Visa.EventType)">
            <summary>
            Enables a client to receive events of the type specified by the <paramref name="eventType" />
            argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">The event type to enable.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.UnlockResource">
            <summary>
            Unlock the resource.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeoutMilliseconds">The maximum amout of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeoutMilliseconds">The maximum amount of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.DisposeManagedResources">
            <summary>
            Disposes internal managed resources and handles to the session and resource manager objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#DisableEvent(System.Int32)">
            <summary>
            Disables a client from receiving events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) to disable.  This may be a custom event type.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#DiscardEvents(System.Int32)">
            <summary>
            Discard all pending events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) for which events are discarded.  This may be a custom
            event type.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#EnableEvent(System.Int32)">
            <summary>
            Enables a client to receive events of the type specified by the <paramref name="eventType" />
            argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">The event type to enable.  This may be a custom event type.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeByte(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt16(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt32(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt64(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeString(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeBoolean(System.Int32,System.Boolean)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeBoolean(Ivi.Visa.NativeVisaAttribute,System.Boolean)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeByte(System.Int32,System.Byte)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeByte(Ivi.Visa.NativeVisaAttribute,System.Byte)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt16(System.Int32,System.Int16)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt16(Ivi.Visa.NativeVisaAttribute,System.Int16)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt32(System.Int32,System.Int32)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt32(Ivi.Visa.NativeVisaAttribute,System.Int32)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt64(System.Int32,System.Int64)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt64(Ivi.Visa.NativeVisaAttribute,System.Int64)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeString(System.Int32,System.String)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeString(Ivi.Visa.NativeVisaAttribute,System.String)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeoutMilliseconds">The maximum amout of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.TimeSpan)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeoutMilliseconds">The maximum amount of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="P:NationalInstruments.Visa.Session.EventQueueCapacity">
            <summary>
            The capacity of the event queue - the maximum number of pending events.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.HardwareInterfaceName">
            <summary>
            Human readable text that describes the hardware interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.HardwareInterfaceNumber">
            <summary>
            The board number of the hardware interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.HardwareInterfaceType">
            <summary>
            Specifies the hardware interface type (GPIB, ASRL, etc.).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceClass">
            <summary>
            The class of resource for this session (INSTR, INTFC, etc.).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceLockState">
            <summary>
            The current lock state of the resource for this session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceManufacturerId">
            <summary>
            The IVI identification number of the software vendor of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceManufacturerName">
            <summary>
            The name of the software vendor that corresponds to the ResourceManufacturerId property.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceName">
            <summary>
            The VISA resource name of the currently open resource. This name is the canonical version
            of the resource name and therefore may vary from the resource descriptor used to
            open/initialize the resource.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceSpecificationVersion">
            <summary>
            The version of the VISA.NET specification that describes the functionality provided by this
            session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.SynchronizeCallbacks">
            <summary>
            Specifies whether callbacks must be performed in a specific synchronization context.
            If false, the implementation is allowed to execute callbacks in any context.
            The default value is true.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.TimeoutMilliseconds">
            <summary>
            The I/O timeout in milliseconds for I/O communication on this resource session.  If the
            timeout is VisaConstants.ImmediateTimeout (0), operations will never wait for the device to respond. If the timeout
            is VisaConstants.InfiniteTimeout (-1), I/O communication will not timeout.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#Handle">
            <summary>
            The ID for this session in the underlying VISA C implementation.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibInterface"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INTFC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibInterface"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INTFC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibInterface"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a GPIB INTFC
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.AssertTrigger">
            <summary>
            Asserts a software trigger.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.ControlAtn(Ivi.Visa.AtnMode)">
            <summary>
            Controls the state of the GPIB ATN interface line, and optionally the active controller
            state of the local interface board.
            </summary>
            <param name="command">The action to be taken with respect to the GPIB ATN line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.PassControl(System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.PassControl(System.Int16,System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
            <param name="secondaryAddress">The secondary address of the GPIB device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.SendCommand(System.Byte[])">
            <summary>
            Writes GPIB command bytes on the bus.
            </summary>
            <param name="data">The GPIB command bytes.</param>
            <returns>
            The number of bytes actually written.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.SendInterfaceClear">
            <summary>
            Pulses the interface clear line (IFC) for at least 100 microseconds.  This operation
            asserts the IFC line and the local interface becomes controller in charge (CIC).
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.SendRemoteLocalCommand(Ivi.Visa.GpibInterfaceRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local
            state of the device.
            </summary>
            <param name="mode">The action to be taken with respect to the GPIB REN line.</param>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.AddressState">
            <summary>
            Indicates whether the specified GPIB interface is currently addressed to talk or listen,
            or is not addressed.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled. In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.AtnState">
            <summary>
            The current state of the GPIB ATN (ATtentioN) interface line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.DeviceStatusByte">
            <summary>
            The 488-style status byte of the local controller associated with this session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.HS488CableLength">
            <summary>
            The total length of the GPIB cable used in the specified GPIB interface, in meters.
            If HS488 is not implemented, the value of this property is -1.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.IOProtocol">
            <summary>
            The protocol type for I/O communication with the physical resource.  In some cases you
            may not be able to change the protocol, so reading this property value may not return
            the same value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.IsControllerInCharge">
            <summary>
            Indicates whether the specified GPIB interface is currently the controller in charge (CIC).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.IsSystemController">
            <summary>
            Specifies whether the specified GPIB interface is currently the system controller.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.NdacState">
            <summary>
            The current state of the GPIB NDAC (Not Data ACcepted) interface line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.PrimaryAddress">
            <summary>
            The primary address of the local GPIB controller used by the given session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.RawIO">
            <summary>
            A reference to the raw I/O interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.RenState">
            <summary>
            The current state of the GPIB REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.SecondaryAddress">
            <summary>
            The secondary address of the local GPIB controller used by the given session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.SrqState">
            <summary>
            The current state of the GPIB SRQ (Service ReQuest) interface line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.TerminationCharacter">
            <summary>
            The ASCII character used to end reading.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.TerminationCharacterEnabled">
            <summary>
            If true, reads end when a termination character is received.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Cleared">
            <summary>
            Occurs when the GPIB controller has been sent a device clear message.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.ControllerInCharge">
            <summary>
            Occurs when the GPIB controller has gained or lost CIC (controller in charge) status.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Listen">
            <summary>
            Occurs when the GPIB controller has been addressed to listen.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.ServiceRequest">
            <summary>
            Occurs when a service request is received from the interface.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Talk">
            <summary>
            Occurs when the GPIB controller has been addressed to talk.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Trigger">
            <summary>
            Occurs when a trigger interrupt is received from the interface.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="T:NationalInstruments.Visa.GpibSession">
            <summary>
            Provides access to the device-level GPIB functionality that is available in VISA.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.MessageBasedSession">
            <summary>
            Provides access to the message-based functionality, such as reading and writing, available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.MessageBasedSession"/> object from
            the specified resource name, access modes, and timeout.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">Mode by which the specified VISA resource is accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.AssertTrigger">
            <summary>
            Asserts a software or hardware trigger dependent on the interface type.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.Clear">
            <summary>
            Performs an IEEE 488.1-style clear of the device and clears the input and
            output buffer (both raw and formatted I/O buffers).  It also may terminate
            pending operations on the device.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.ReadStatusByte">
            <summary>
            Reads the status from the device.  For 488.2 instruments, this is the
            488.2 status byte.
            </summary>
            <returns>
            A value that indicates which status byte bits are set.
            </returns>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.FormattedIO">
            <summary>
            A reference to the formatted I/O interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.IOProtocol">
            <summary>
            The protocol type for I/O communication with the physical resource.  In some cases you
            may not be able to change the protocol, so reading this property value may not return
            the same value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.RawIO">
            <summary>
            A reference to the raw I/O interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.TerminationCharacter">
            <summary>
            The ASCII character used to end reading.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.TerminationCharacterEnabled">
            <summary>
            If true, reads end when a termination character is received.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.MessageBasedSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the device.
            </summary>
            <remarks>
            When this event is received, client code should call ReadStatusByte.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a GPIB INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.SendRemoteLocalCommand(Ivi.Visa.GpibInstrumentRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local state
            of the device.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the GPIB instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.PrimaryAddress">
            <summary>
            The primary address of the GPIB device used by the given session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.ReaddressingEnabled">
            <summary>
            Specifies whether to use repeat addressing before each read or write operation. In some
            cases you may not be able to change the readdressing behavior, so reading this property
            value may not return the same value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.RenState">
            <summary>
            The current state of the GPIB REN interface line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.SecondaryAddress">
            <summary>
            The secondary address of the GPIB device used by the given session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.UnaddressingEnabled">
            <summary>
            Specifies whether to unaddress the device (UNT and UNL) after each read or write operation.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.MemoryMap">
            <summary>
            Exposes memory mapped operations for register based sessions.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek8(System.Int64)">
            <summary>
            Read a byte from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The byte that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek16(System.Int64)">
            <summary>
            Read a 16-bit integer from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The 16-bit integer that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek32(System.Int64)">
            <summary>
            Read a 32-bit integer from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The 32-bit integer that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek64(System.Int64)">
            <summary>
            Read a 64-bit integer from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The 64-bit integer that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke8(System.Int64,System.Byte)">
            <summary>
            Write a byte value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The byte that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke16(System.Int64,System.Int16)">
            <summary>
            Write a 16-bit integer value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The 16-bit integer that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke32(System.Int64,System.Int32)">
            <summary>
            Write a 32-bit integer value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The 32-bit integer that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke64(System.Int64,System.Int64)">
            <summary>
            Write a 64-bit integer value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The 64-bit integer that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.DisposeUnmanagedResources">
            <summary>
            Unmaps the memory region that was mapped when this object was created.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.AddressSpace">
            <summary>
            The address space that is currently mapped to this session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.BaseAddress">
            <summary>
            The starting address of the memory <see cref="P:Ivi.Visa.IMemoryMap.AddressSpace" />
            that is currently mapped to this session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.Size">
            <summary>
            The size of the memory <see cref="P:Ivi.Visa.IMemoryMap.AddressSpace" />
            that is currently mapped to this session, starting at the
            <see cref="P:Ivi.Visa.IMemoryMap.BaseAddress" />
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.VirtualAddress">
            <summary>
            Returns IntPtr.Zero if the window is only accessible through the operations provided
            on this interface.  A return value other than IntPtr.Zero indicates you can dereference
            the mapped address as a pointer.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.NativeVisaEventArgs">
            <summary>
            Provides access to VISA event argument objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeByte(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt16(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt32(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt64(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeString(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.DisposeManagedResources">
            <summary>
            Disposes the event context held by this class.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.NativeVisaEventArgs.EventArgs">
            <summary>
            An event args reference for the native C event.  This may reference an object that
            derives from EventArgs, if the event handler for the event specified by the
            EventArg.EventType of EventArg.CustomEventType properties uses a derived class.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.PxiBackplane">
            <summary>
            Provides access to the PXI backplane functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiBackplane"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a PXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiBackplane"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a PXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiBackplane"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a PXI BACKPLANE
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">Indicates whether the trigger was already mapped.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.ReserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a single trigger line that the caller can then map and/or assert.
            </summary>
            <param name="bus">The trigger bus segment in which to reserve the trigger.</param>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.ReserveTriggers(System.Int16[],Ivi.Visa.TriggerLine[])">
            <summary>
            Reserve multiple trigger lines that the caller can then map and/or assert.  This
            method will succeed only if it can reserve all of the bus/line pairs.  If any of
            the bus/line pairs cannot be reserved, this method will not reserve any of them.
            Note that the <paramref name="buses"/> and <paramref name="lines"/> arrays are
            parallel: the lengths must be the same, and buses[n] corresponds to lines[n].
            </summary>
            <param name="buses">The trigger bus segments in which to reserve the triggers.</param>
            <param name="lines">The trigger lines to reserve.</param>
            <exception cref="T:System.ArgumentException">The array parameters must be of the same size</exception>
            <exception cref="T:Ivi.Visa.NativeVisaException"></exception>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap all destination trigger lines to which the specified source trigger line is currently
            connected.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <exception cref="T:Ivi.Visa.NativeVisaException"></exception>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.UnreserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a single trigger line that the caller previously reserved.
            </summary>
            <param name="bus">The trigger bus segment in which to unreserve the trigger.</param>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="P:NationalInstruments.Visa.PxiBackplane.ChassisNumber">
            <summary>
            The identification number of this PXI chassis.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiBackplane.ManufacturerName">
            <summary>
            The name of the hardware vendor for this PXI chassis.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiBackplane.ModelName">
            <summary>
            The name of this chassis.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.PxiMemory">
            <summary>
            Provides access to the specific PXI memory-access functionality available in VISA.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.RegisterBasedSession">
            <summary>
            Provides access to the register-based functionality, such as moving data in and out, available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.RegisterBasedSession"/> object from
            the specified resource name, access modes, and timeout.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">Mode by which the specified VISA resource is accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Map the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space" /> to be
            mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>
            A reference to the IMemoryMap interface, which provides the ability to
            Peek and Poke memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            Write an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            Write a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            Write a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Write a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="P:NationalInstruments.Visa.RegisterBasedSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.RegisterBasedSession.DestinationIncrement">
            <summary>
            For MoveOut methods, specifies whether to do a block move or a FIFO write.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.RegisterBasedSession.SourceIncrement">
            <summary>
            For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiMemory"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a PXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiMemory"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a PXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiMemory"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a PXI MEMACC
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.MemoryAllocate(System.Int64,System.Boolean)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <param name="require32BitRegion">The entire allocated region must be
            in the 32-bit address range.</param>
            <returns>
            The offset of the allocated device memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.MemoryAllocate(System.Int64)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <returns>
            The offset of the allocated device memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.MemoryFree(System.Int64)">
            <summary>
            Free previously allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="T:NationalInstruments.Visa.PxiSession">
            <summary>
            Provides access to the device-level PXI functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a PXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a PXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a PXI INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.ReserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a PXI trigger line.
            </summary>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.UnreserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a PXI trigger line.
            </summary>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ActualLinkWidth">
            <summary>
            The actual, negotiated link width.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.AllowWriteCombining">
            <summary>
            Specifies whether the implementation should attempt to combine bus write transfers
            into a larger transfer before bursting over the PCI bus.  In some cases you may not be able to
            change the write combining behavior, so reading this property value may not return the same
            value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.BusNumber">
            <summary>
            The PCI bus number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ChassisNumber">
            <summary>
            The identification number of the chassis where this device is located.  If the chassis
            has not been identified, this property returns -1.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.DeviceNumber">
            <summary>
            The PCI device number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.DstarBusNumber">
            <summary>
            The differential star bus number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.DstarLineSet">
            <summary>
            The connected set of PXI Express differential star bus lines.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.FunctionNumber">
            <summary>
            The PCI function number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.IsExpress">
            <summary>
            If true, the device is a PXI Express device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ManufacturerId">
            <summary>
            The subsystem PCI vendor identification number of the hardware vendor for this
            device.  If the subsystem information does not exist, this returns the primary PCI
            vendor identification number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MaxLinkWidth">
            <summary>
            The maximum usable link width.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar0">
            <summary>
            The memory base address for Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar1">
            <summary>
            The memory base address for Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar2">
            <summary>
            The memory base address for Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar3">
            <summary>
            The memory base address for Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar4">
            <summary>
            The memory base address for Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar5">
            <summary>
            The memory base address for Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar0">
            <summary>
            The memory size for Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar1">
            <summary>
            The memory size for Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar2">
            <summary>
            The memory size for Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar3">
            <summary>
            The memory size for Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar4">
            <summary>
            The memory size for Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar5">
            <summary>
            The memory size for Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar0">
            <summary>
            The memory type used in Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar1">
            <summary>
            The memory type used in Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar2">
            <summary>
            The memory type used in Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar3">
            <summary>
            The memory type used in Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar4">
            <summary>
            The memory type used in Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar5">
            <summary>
            The memory type used in Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ModelCode">
            <summary>
            The vendor-specific subsystem PCI model number for this device.  If the subsystem
            information does not exist, this returns the primary PCI model number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.Slot">
            <summary>
            The physical slot location of this device within its chassis.  If the location is
            not known, this property returns -1.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotLinkWidth">
            <summary>
            The link width used by the slot.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotLocalBusLeft">
            <summary>
            The slot number or special feature connected to local left bus lines.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotLocalBusRight">
            <summary>
            The slot number or special feature connected to local right bus lines.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotPath">
            <summary>
            The slot path.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.StarTriggerBus">
            <summary>
            The value for the PXI star trigger bus.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.StarTriggerLine">
            <summary>
            The value for the connected PXI star trigger line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.TriggerBus">
            <summary>
            The trigger bus segment of this device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.PxiSession.Interrupt">
            <summary>
            Occurs when a PXI interrupt is received from the device.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.ResourceManager">
            <summary>
            Provides functionality to open VISA sessions, parse resource strings, and find available resources on the system.
            </summary>
            <remarks>
            This type provides all of the functionality necessary to instantiate the correct VISA session based on the resource string.
            You can find the available resources on the system with <see cref="M:NationalInstruments.Visa.ResourceManager.Find(System.String)"/>.
            Use <see cref="M:NationalInstruments.Visa.ResourceManager.Open(System.String)"/> to instantiate the specific session object that pertains
            to your resource string.
            </remarks>
            <seealso cref="M:NationalInstruments.Visa.ResourceManager.Find(System.String)"/>
            <seealso cref="M:NationalInstruments.Visa.ResourceManager.Open(System.String)"/>
            <seealso cref="M:NationalInstruments.Visa.ResourceManager.Parse(System.String)"/>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.#ctor">
            <summary>
            Creates an instance of the <see cref="T:NationalInstruments.Visa.ResourceManager"/> object.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Find(System.String)">
            <summary>
            Find all of the VISA resources that match the specified <paramref name="pattern" />.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>
            All VISA resources matching the search <paramref name="pattern" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Open(System.String)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>
            A reference to a session for the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <returns>
            A reference to a session for the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32,Ivi.Visa.ResourceOpenStatus@)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <param name="openStatus">The status of the open operation.</param>
            <returns>
            A reference to a session for the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Parse(System.String)">
            <summary>
            Parse a resource string to get extended interface information.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>
            The detailed information derived by parsing the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.DisposeManagedResources">
            <summary>
            Disposes the handle to the resource manager object.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.ImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.ManufacturerId">
            <summary>
            The ID number of the vendor of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.ManufacturerName">
            <summary>
            The name of the vendor of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.SpecificationVersion">
            <summary>
            The version of the VISA.NET specification with which this VISA.NET implementation
            complies.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.ResourceTypeMismatchException">
            <summary>
            This exception is thrown when a specific resource type is being constructed with a valid resource
            of a different type and the 'checkResourceType' parameter in the constructor is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.SerialSession">
            <summary>
            Provides access to serial functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.SerialSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a Serial INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.SerialSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a Serial INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.SerialSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a Serial INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with serial interfaces.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for serial communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.BaudRate">
            <summary>
            The baud rate of the interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.BytesAvailable">
            <summary>
            The number of bytes available in the global receive buffer.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.ClearToSendState">
            <summary>
            The current state of the Clear To Send (CTS) input signal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataBits">
            <summary>
            The number of data bits contained in each frame (5, 6, 7, or 8).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataCarrierDetectState">
            <summary>
            The current state of the Data Carrier Detect (DCD) input signal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataSetReadyState">
            <summary>
            The current state of the Data Set Ready (DSR) input signal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataTerminalReadyState">
            <summary>
            The state of the Data Terminal Ready (DTR) output signal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.FlowControl">
            <summary>
            The flow control mechanism(s) used by this serial connection.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.Parity">
            <summary>
            The parity used with every frame transmitted and received.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.ReadTermination">
            <summary>
            The method used to terminate read operations.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.ReplacementCharacter">
            <summary>
            The character used to replace incoming characters that arrive with errors (such as
            parity errors).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.RequestToSendState">
            <summary>
            The current state of the Request To Send (RTS) output signal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.RingIndicatorState">
            <summary>
            The current state of the Ring Indicator (RI) input signal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.StopBits">
            <summary>
            The number of stop bits used to indicate the end of a frame.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.WriteTermination">
            <summary>
            The method used to terminate write operations.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.XOffCharacter">
            <summary>
            Specifies the value of the XOFF character used for XON/XOFF flow control (both directions).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.XOnCharacter">
            <summary>
            Specifies the value of the XON character used for XON/XOFF flow control (both directions).
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.TcpipSession">
            <summary>
            Provides access to the specific TCP/IP functionality for accessing VXI-11 and HiSLIP instruments available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a TCPIP INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the TCPIP instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for TCPIP communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.Address">
            <summary>
            The TCP/IP address of the device to which the session is connected, in
            IPv4 dot-notation or IPv6 representation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.DeviceName">
            <summary>
            The LAN device name used by the VXI-11 or HiSLIP protocol during connection.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HiSLIPMaximumMessageKBytes">
            <summary>
            The HiSLIP maximum message size in kilobytes, where a kilobyte is 1024 bytes.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HiSLIPOverlapEnabled">
            <summary>
            Specifies whether the HiSLIP "overlap" mode is enabled.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HiSLIPProtocolVersion">
            <summary>
            The negotiated HiSLIP protocol version.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HostName">
            <summary>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.IsHiSLIP">
            <summary>
            If true, this session is using the HiSLIP protocol to communicate with the device.  If
            false, the session is using VXI-11.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.Port">
            <summary>
            The device-side port number being used for communication.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.TcpipSocket">
            <summary>
            Provides access to the TCP/IP socket functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSocket"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP SOCKET resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSocket"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP SOCKET resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSocket"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a TCPIP SOCKET
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with the TCPIP connection.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for TCPIP communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.Address">
            <summary>
            The TCP/IP address of the device to which the session is connected, formatted in
            dot-notation.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.HostName">
            <summary>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.KeepAlive">
            <summary>
            If true, the TCP/IP provider enables the use of keep-alive packets on TCP connections.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.NoDelay">
            <summary>
            If true, the Nagle algorithm is disabled.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.Port">
            <summary>
            The port number for a given TCP/IP address (required for a TCP/IP SOCKET resource).
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbPipeState">
            <summary>
            Specifies whether a USB pipe is stalled or ready.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbPipeState.Unknown">
            <summary>
            The state of the USB pipe is unknown.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbPipeState.Ready">
            <summary>
            The USB pipe is ready.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbPipeState.Stalled">
            <summary>
            The USB pipe is stalled.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbRaw">
            <summary>
            Provides access to the raw USB functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a USB RAW resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a USB RAW resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a USB RAW
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.ControlIn(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Request arbitrary data from a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            device-to-host.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="length">The length of the data in bytes to send to the device during the Data
            stage. If this value is 0, then a zero-length byte array is returned from this method.</param>
            <returns>
            The data received from the device.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="data">The data to send to the device during the Data stage.</param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.AlternateSetting">
            <summary>
            USB alternate setting that this session uses.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkInPipe">
            <summary>
            Endpoint number of the USB bulk-in pipe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkInStatus">
            <summary>
            Value indicating whether the USB bulk-in pipe that this session uses is stalled or ready.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkOutPipe">
            <summary>
            Endpoint number of the USB bulk-out pipe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkOutStatus">
            <summary>
            Value indicating whether the USB bulk-out pipe that this session uses is stalled or ready.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ControlPipe">
            <summary>
            Endpoint number of the USB control pipe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.InterruptInPipe">
            <summary>
            Endpoint number of the USB interrupt pipe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.InterruptInStatus">
            <summary>
            Value indicating whether the USB interrupt-in pipe that this session uses is stalled or ready.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ManufacturerId">
            <summary>
            The USB vendor identification number of the hardware vendor for this device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.MaximumInterruptSize">
            <summary>
            Specifies the maximum number of bytes that this USB device will send on the interrupt
            IN pipe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ModelCode">
            <summary>
            The vendor-specific model number for this USB device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.NumberOfPipes">
            <summary>
            Number of pipes supported by the USB interface associated with this session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.NumberOfUsbInterfaces">
            <summary>
            Number of USB interfaces supported by the device associated with this session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ReadTermination">
            <summary>
            The method that terminates read operations.  For a list of values, refer to
            <see cref="T:NationalInstruments.Visa.UsbTerminationMethod"/>.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbClass">
            <summary>
            USB class that this session uses.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbInterfaceNumber">
            <summary>
            The USB interface number of the interface to which the USB device is connected.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbProtocol">
            <summary>
            The USB protocol number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbSerialNumber">
            <summary>
            The serial number of the USB device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbSubclass">
            <summary>
            USB subclass that this session uses.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.UsbRaw.Interrupt">
            <summary>
            Occurs when a vendor-specific USB interrupt is received from the device.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbSession">
            <summary>
            Provides access to the specific device-level USB functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a USB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a USB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a USB INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.ControlIn(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Request arbitrary data from a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            device-to-host.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="length">The length of the data in bytes to send to the device during the Data
            stage. If this value is 0, then a zero-length byte array is returned from this method.</param>
            <returns>
            The data received from the device.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="data">The data to send to the device during the Data stage.</param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the USB instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.Is4882Compliant">
            <summary>
            True if the device is IEEE 488.2 compliant.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ManufacturerId">
            <summary>
            The USB vendor identification number of the hardware vendor for this device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.MaximumInterruptSize">
            <summary>
            Specifies the maximum number of bytes that this USB device will send on the interrupt
            IN pipe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ModelCode">
            <summary>
            The vendor-specific model number for this USB device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.UsbInterfaceNumber">
            <summary>
            The USB interface number of the interface to which the USB device is connected.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.UsbProtocol">
            <summary>
            The USB protocol number.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.UsbSerialNumber">
            <summary>
            The serial number of the USB device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.UsbSession.Interrupt">
            <summary>
            Occurs when a vendor-specific USB interrupt is received from the device.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbTerminationMethod">
            <summary>
            Specifies the available methods to terminate a read operation on the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbTerminationMethod.None">
            <summary>
            The read operation ignores short packets. Reads do not terminate until
            all of the requested data is received, or an error occurs.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbTerminationMethod.Short">
            <summary>
            The read operation terminates on a short packet. Use this setting if the device terminates
            all read transfers with a short packet, including sending a zero (short) packet
            when the last data packet is full.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbTerminationMethod.ShortOrCount">
            <summary>
            The read operation terminates on a short packet or when it receives the requested
            count of data bytes. Use this setting if the device does not send zero packets.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.VxiBackplane">
            <summary>
            Provides access to the VXI backplane functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiBackplane"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a VXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiBackplane"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a VXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiBackplane"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a VXI BACKPLANE
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.AssertInterrupt(System.Int16,System.Int32)">
            <summary>
            Assert the specified device interrupt or signal.
            </summary>
            <param name="irqLevel">The specified device interrupt or signal.</param>
            <param name="statusId">The status value to be presented during an interrupt
            acknowledge cycle.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.AssertTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="line">The trigger to assert.</param>
            <param name="protocol">The VXI trigger protocol to use when asserting the trigger.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.AssertUtilitySignal(Ivi.Visa.VxiUtilitySignal)">
            <summary>
            Assert the specified utility bus signal.
            </summary>
            <param name="signal">The utility bus signal to assert.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">If true, the trigger has already been mapped.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.UnmapTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.UnmapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.ChassisLogicalAddress">
            <summary>
            The logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.InterruptStatus">
            <summary>
            The current state of the VXI/VME interrupt lines.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.SystemFailureStatus">
            <summary>
            The current state of the VXI/VME SYSFAIL (SYStem FAILure) backplane line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.TriggerStatus">
            <summary>
            The VXI trigger line(s) that are currently set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.TriggerSupport">
            <summary>
            The VXI trigger line(s) that this implementation supports.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiBackplane.SystemFailure">
            <summary>
            Occurs when the VXI backplane experiences a system failure.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiBackplane.SystemReset">
            <summary>
            Occurs when the VXI backplane has initiated a system reset.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiBackplane.Trigger">
            <summary>
            Occurs when a trigger is received from the VXI backplane.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.VxiMemory">
            <summary>
            Provides access to the specific VXI memory-access functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiMemory"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a VXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiMemory"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a VXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiMemory"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a VXI MEMACC
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.Move(Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,System.Int64)">
            <summary>
            Moves data from the specified source to the specified destination.
            </summary>
            <param name="sourceSpace">The address space of the source.</param>
            <param name="sourceOffset">The offset (in bytes) of the memory
            <paramref name="sourceSpace" /> from which data is moved.</param>
            <param name="sourceWidth">The data width of the source.</param>
            <param name="destinationSpace">The address space of the destination.</param>
            <param name="destinationOffset">The offset (in bytes) of the memory
            <paramref name="destinationSpace" /> to which data is moved.</param>
            <param name="destinationWidth">The data width of the destination.</param>
            <param name="sourceCount">The number of elements to move, where the data width of the
            elements to move is identical to the source data width.</param>
        </member>
        <member name="P:NationalInstruments.Visa.VxiMemory.LogicalAddress">
            <summary>
            The logical address of the VXI or VME controller for this interface.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.VxiSession">
            <summary>
            Provides access to the specific device-level VXI functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a VXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a VXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a VXI INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.AssertTrigger(Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="protocol">The trigger protocol to use when the trigger is asserted.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.CommandQuery(Ivi.Visa.VxiCommandMode,System.Int32)">
            <summary>
            Send the device a miscellaneous command or query and/or retrieves the response to a
            previous query.
            </summary>
            <param name="mode">Indicates whether to issue a command and/or retrieve a response.</param>
            <param name="command">The command to send.</param>
            <returns>
            The response retrieved from the device.  If the mode does not include a response, this method
            returns zero.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MemoryAllocate(System.Int64)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes</param>
            <returns>
            The offset of the allocated device memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MemoryFree(System.Int64)">
            <summary>
            Free previously allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.AssertTrigger">
            <summary>
            Asserts a software or hardware trigger dependent on the interface type.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Clear">
            <summary>
            Performs an IEEE 488.1-style clear of the device and clears the input and
            output buffer (both raw and formatted I/O buffers).  It also may terminate
            pending operations on the device.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.ReadStatusByte">
            <summary>
            Reads the status from the device.  For 488.2 instruments, this is the
            488.2 status byte.
            </summary>
            <returns>
            A value that indicates which status byte bits are set.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Map the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space" /> to be
            mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>
            A reference to the IMemoryMap interface, which provides the ability to
            Peek and Poke memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            Write an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            Write a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            Write a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Write a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ChassisLogicalAddress">
            <summary>
            The logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.CommanderLogicalAddress">
            <summary>
            The logical address of the commander of the VXI device used by the given session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DestinationAccessPrivilege">
            <summary>
            The address modifier to be used in high-level access operations, such as OutXX() and
            MoveOutXX(), when writing to the destination.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DestinationByteOrder">
            <summary>
            The destination address space byte order.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DeviceClass">
            <summary>
            The VXI-defined device class to which the resource belongs.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FastDataChannelNumber">
            <summary>
            The FDC channel that will be used when transferring data.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FastDataChannelUsePair">
            <summary>
            If true, a channel pair will be used when transferring data, rather than a single
            channel.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FastDataChannelUseStreaming">
            <summary>
            If true, FDC streaming will be used when transferring data (Normal mode or Stream
            mode).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.Is4882Compliant">
            <summary>
            If true, the device is IEEE 488.2 compliant.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.IsImmediateServant">
            <summary>
            If true, the device is an immediate servant of the controller running VISA.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.LogicalAddress">
            <summary>
            The logical address of the VXI or VME device used by the given session.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ManufacturerId">
            <summary>
            The VXIbus vendor identification number of the hardware vendor for this device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemoryBase">
            <summary>
            The base address of the device in VXIbus memory address space.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemoryMapAccessPrivilege">
            <summary>
            The address modifier to be used in <see cref="T:Ivi.Visa.IMemoryMap" /> operations when
            accessing the mapped window.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemoryMapByteOrder">
            <summary>
            The byte order to be used in <see cref="T:Ivi.Visa.IMemoryMap" /> operations when
            accessing the mapped window.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemorySize">
            <summary>
            The size of the memory requested by the device in the VXIbus address space.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemorySpace">
            <summary>
            The VXIbus address space used by the device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ModelCode">
            <summary>
            The vendor-specific model number for this VXIbus device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.Slot">
            <summary>
            The physical slot location of this VXIbus device.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SourceAccessPrivilege">
            <summary>
            The address modifier to be used in high-level access operations, such as InXX() and
            MoveInXX(), when reading from the source.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SourceByteOrder">
            <summary>
            The source address space byte order.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TriggerLine">
            <summary>
            The current triggering line.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TriggerSupport">
            <summary>
            The VXI trigger line(s) that this implementation supports.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FormattedIO">
            <summary>
            A reference to the formatted I/O interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.IOProtocol">
            <summary>
            The protocol type for I/O communication with the physical resource.  In some cases you
            may not be able to change the protocol, so reading this property value may not return
            the same value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.RawIO">
            <summary>
            A reference to the raw I/O interface.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TerminationCharacter">
            <summary>
            The ASCII character used to end reading.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TerminationCharacterEnabled">
            <summary>
            If true, reads end when a termination character is received.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DestinationIncrement">
            <summary>
            For MoveOut methods, specifies whether to do a block move or a FIFO write.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SourceIncrement">
            <summary>
            For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.Interrupt">
            <summary>
            Occurs when a VXIbus interrupt is received from the device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.SignalProcessor">
            <summary>
            Occurs when a VXIbus signal or VXIbus interrupt is received from the device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.Trigger">
            <summary>
            Occurs when a VXIbus trigger is received from the device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the device.
            </summary>
            <remarks>
            When this event is received, client code should call ReadStatusByte.
            </remarks>
        </member>
    </members>
</doc>
